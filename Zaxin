-- Library do Hub Preto e roxa --
local success, redzlib = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/267266273ffsfs/slapowsoufoda/refs/heads/main/Main.txt"))()
end)
if not success or not redzlib then
    warn("Falha ao carregar a library. Verifique o link e o executor.")
    return
end

local Window = redzlib:MakeWindow({
    Title = "Zaxin Hub | Brookhaven RP üè°üåå",
    SubTitle = "by Zayun",
    SaveFolder = "Zaxin Hub.2025"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://140695527589201", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(35, 1) },
})

-- abas
local Tab1 = Window:MakeTab({"Credits", "info"})
local Tab2 = Window:MakeTab({"Fun", "fun"})
local Tab3 = Window:MakeTab({"Troll", "skull"})
local Tab4 = Window:MakeTab({"OP", "home"})

-- Tab1
local Section = Tab1:AddSection({"Servidor Discord"})
Tab1:AddDiscordInvite({
    Name = "Zaxin Hub",
    Description = "Entre no nosso servidor e fique por Dentro das novidades!",
    Logo = "rbxassetid://140695527589201",
    Invite = "https://discord.gg/8qtSfVsfg",
})
local Section = Tab1:AddSection({"Informa√ß√µes Do Script"})
local Paragraph = Tab1:AddParagraph({"Criador do Hub: Zayun", "Vers√£o do Hub: 0.2"})
local Paragraph = Tab1:AddParagraph({"Designer do Hub", "Retx e Thur"})
local Paragraph = Tab1:AddParagraph({"sz.zxb", "Assistente e Sub Progamador"})

-- Tab2
local Paragraph = Tab2:AddParagraph({"Em Manuten√ß√£o.", "problemas ocorreram"})

-- Tab3 Troll
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local selectedPlayer = nil
local isFollowingKill = false
local isFollowingPull = false
local running = false
local connection = nil
local flingConnection = nil
local originalPosition = nil
local savedPosition = nil
local selectedKillPullMethod = nil
local SpectateToggleTab10 = nil


local function getPlayerNames()
    local names = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then table.insert(names, p.Name) end
    end
    return names
end

-- dropdown atualiza√ß√£o (fun√ß√£o reutiliz√°vel)
local function updateDropdown(dropdown, spectateToggle)
    pcall(function()
        local currentValue = dropdown:Get()
        local playerNames = getPlayerNames()
        dropdown:Set(playerNames)
        if currentValue and not table.find(playerNames, currentValue) then
            dropdown:Set("")
            selectedPlayer = nil
            if isSpectating then
                stopSpectating()
                if spectateToggle then spectateToggle:Set(false) end
            end
            if running or isFollowingKill or isFollowingPull then
                running = false
                isFollowingKill = false
                isFollowingPull = false
                if connection then connection:Disconnect() connection = nil end
                if flingConnection then flingConnection:Disconnect() flingConnection = nil end
                if SpectateToggleTab10 then SpectateToggleTab10:Set(false) end
            end
        elseif currentValue and table.find(playerNames, currentValue) then
            dropdown:Set(currentValue)
        end
    end)
end

-- spectate
local isSpectating = false
local spectatedPlayer = nil
local characterConnection = nil

local function spectatePlayer(playerName)
    if characterConnection then
        characterConnection:Disconnect()
        characterConnection = nil
    end
    local targetPlayer = Players:FindFirstChild(playerName)
    if targetPlayer and targetPlayer ~= LocalPlayer then
        spectatedPlayer = targetPlayer
        isSpectating = true
        local function updateCamera()
            if not isSpectating or not spectatedPlayer then return end
            if spectatedPlayer.Character and spectatedPlayer.Character:FindFirstChild("Humanoid") then
                Workspace.CurrentCamera.CameraSubject = spectatedPlayer.Character.Humanoid
            else
                Workspace.CurrentCamera.CameraSubject = nil
            end
        end
        updateCamera()
        characterConnection = RunService.Heartbeat:Connect(updateCamera)
        spectatedPlayer.CharacterAdded:Connect(function()
            if isSpectating then updateCamera() end
        end)
    else
        isSpectating = false
        spectatedPlayer = nil
    end
end

local function stopSpectating()
    if characterConnection then
        characterConnection:Disconnect()
        characterConnection = nil
    end
    isSpectating = false
    spectatedPlayer = nil
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    else
        Workspace.CurrentCamera.CameraSubject = nil
        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end

-- teleport seguro
local function teleportToPlayer(playerName)
    local targetPlayer = Players:FindFirstChild(playerName)
    if targetPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
                part.Anchored = true
            end
        end
        pcall(function()
            myHRP.CFrame = CFrame.new(targetPlayer.Character.HumanoidRootPart.Position + Vector3.new(0,2,0))
        end)
        if myHumanoid then
            myHumanoid.Sit = false
            myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        end
        task.wait(0.5)
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
            end
        end
    end
end

LocalPlayer.CharacterAdded:Connect(function()
    if isSpectating then stopSpectating() end
end)

-- Dropdown Troll
local valor_do_nome_do_joagdor
local DropdownPlayerTab2 = Tab3:AddDropdown({
    Name = "Selecionar Jogador",
    Description = "Escolha um jogador",
    Default = "",
    Multi = false,
    Options = getPlayerNames(),
    Flag = "player list",
    Callback = function(selectedPlayerName)
        valor_do_nome_do_joagdor = selectedPlayerName
        if selectedPlayerName == "" or not selectedPlayerName then
            selectedPlayer = nil
            if running or isFollowingKill or isFollowingPull then
                running = false
                isFollowingKill = false
                isFollowingPull = false
            end
            stopSpectating()
        else
            selectedPlayer = Players:FindFirstChild(selectedPlayerName)
            stopSpectating()
            spectatePlayer(selectedPlayerName)
        end
    end
})

function UptadePlayers()
    DropdownPlayerTab2:Set(getPlayerNames())
end

-- atualiza automaticamente quando jogador entra/sai
Players.PlayerAdded:Connect(function() UptadePlayers() end)
Players.PlayerRemoving:Connect(function() UptadePlayers() end)

Tab3:AddButton({"Atualizar lista", function() UptadePlayers() end})
UptadePlayers()

Tab3:AddButton({
    Title = "Teleportar para Jogador",
    Desc = "Clique para teletransportar para o jogador selecionado",
    Callback = function()
        if valor_do_nome_do_joagdor and valor_do_nome_do_joagdor ~= "" then
            teleportToPlayer(valor_do_nome_do_joagdor)
        else
            print("Selecione um jogador antes de teletransportar.")
        end
    end
})

-- Toggle Spectate
SpectateToggleTab10 = Tab3:AddToggle({
    Name = "Visualizar Jogador",
    Description = "Ativa/desativa a visualiza√ß√£o do jogador selecionado",
    Default = false,
    Callback = function(state)
        if state then
            if selectedPlayer then
                spectatePlayer(selectedPlayer.Name)
            else
                SpectateToggleTab10:Set(false) -- desliga se nenhum jogador selecionado
            end
        else
            stopSpectating()
        end
    end
})
-- Se√ß√£o Trolar Kill
Tab3:AddSection({"Trolar Kill"})
local DropdownKillPullMethod = Tab3:AddDropdown({
    Name = "Kill or bring",
    Description = "Escolha o m√©todo para matar ou puxar",
    Options = {"Sof√°", "√înibus"},
    Callback = function(value) selectedKillPullMethod = value end
})

------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                   --fling com sofa--
------------------------------------------------------------------------------------------------------------------------------------------------------------------

local function equipSofa()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local sofa = backpack:FindFirstChild("Couch") or (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Couch"))
    if not sofa then
        local args = { [1] = "PickingTools", [2] = "Couch" }
        local successInvoke = pcall(function()
            local re = ReplicatedStorage:FindFirstChild("RE")
            if re and re:FindFirstChild("1Too1l") then
                re:FindFirstChild("1Too1l"):InvokeServer(unpack(args))
            end
        end)
        if not successInvoke then return false end
        local attempts = 0
        repeat
            sofa = backpack:FindFirstChild("Couch") or (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Couch"))
            task.wait(0.2)
            attempts = attempts + 1
            if attempts > 25 then break end
        until sofa
        if not sofa then return false end
    end
    if sofa.Parent ~= LocalPlayer.Character then
        sofa.Parent = LocalPlayer.Character
    end
    return true
end

local function killWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    if not equipSofa() then return end
    isFollowingKill = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
end

local function pullWithSofa(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    if not equipSofa() then return end
    isFollowingPull = true
    originalPosition = LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
end

----------------------------------------------------------------------------
                                                   --fling com onibus--
----------------------------------------------------------------------------

local function killWithBus(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not LocalPlayer.Character then return end
    local character = LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not myHRP then return end
    savedPosition = myHRP.Position
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1181.83, 76.08, -1158.83))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.GettingUp) end
    end)
    task.wait(0.5)

    disableCarClient()

    local args = { [1] = "DeleteAllVehicles" }
    pcall(function()
        local re = ReplicatedStorage:FindFirstChild("RE")
        if re and re:FindFirstChild("1Ca1r") then
            re:FindFirstChild("1Ca1r"):FireServer(unpack(args))
        end
    end)
    args = { [1] = "PickingCar", [2] = "SchoolBus" }
    pcall(function()
        local re = ReplicatedStorage:FindFirstChild("RE")
        if re and re:FindFirstChild("1Ca1r") then
            re:FindFirstChild("1Ca1r"):FireServer(unpack(args))
        end
    end)
    task.wait(1)
    local vehiclesFolder = Workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return end
    local busName = LocalPlayer.Name .. "Car"
    local bus = vehiclesFolder:FindFirstChild(busName)
    if not bus then return end
    pcall(function()
        myHRP.Anchored = true
        myHRP.CFrame = CFrame.new(Vector3.new(1171.15, 79.45, -1166.2))
        task.wait(0.2)
        myHRP.Velocity = Vector3.zero
        myHRP.RotVelocity = Vector3.zero
        myHRP.Anchored = false
        humanoid:ChangeState(Enum.HumanoidStateType.Seated)
    end)
    local sitStart = tick()
    repeat
        task.wait()
        if tick() - sitStart > 10 then return end
    until humanoid.Sit
    for _, part in ipairs(bus:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
            pcall(function() part:SetNetworkOwner(nil) end)
        end
    end
    running = true
    connection = RunService.Stepped:Connect(function()
        if not running then return end
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = false end
        end
    end)
    local lastUpdate = tick()
    local updateInterval = 0.05
    local startTime = tick()
    flingConnection = RunService.Heartbeat:Connect(function()
        if not running then return end
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local newTargetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
        local newTargetHumanoid = targetCharacter:FindFirstChild("Humanoid")
        if not newTargetHRP or not newTargetHumanoid then return end
        if not myHRP or not humanoid then running = false return end
        if tick() - lastUpdate < updateInterval then return end
        lastUpdate = tick()
        local offset = Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
        pcall(function()
            local targetPosition = newTargetHRP.Position + offset
            bus:PivotTo(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
        local playerSeated = false
        for _, seat in ipairs(bus:GetDescendants()) do
            if (seat:IsA("Seat") or seat:IsA("VehicleSeat")) and seat.Name ~= "VehicleSeat" then
                if seat.Occupant == newTargetHumanoid then
                    playerSeated = true
                    break
                end
            end
        end
        if playerSeated or tick() - startTime > 10 then
            running = false
            if connection then connection:Disconnect() connection = nil end
            if flingConnection then flingConnection:Disconnect() flingConnection = nil end
            pcall(function()
                bus:PivotTo(CFrame.new(Vector3.new(-76.6, -401.97, -84.26)))
            end)
            task.wait(0.5)

            disableCarClient()

            local args = { [1] = "DeleteAllVehicles" }
            pcall(function()
                local re = ReplicatedStorage:FindFirstChild("RE")
                if re and re:FindFirstChild("1Ca1r") then
                    re:FindFirstChild("1Ca1r"):FireServer(unpack(args))
                end
            end)
            if character then
                local myHRP = character:FindFirstChild("HumanoidRootPart")
                if myHRP and savedPosition then
                    pcall(function()
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(savedPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.GettingUp) end
                    end)
                end
            end
            if character then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                    end
                end
            end
            local myHumanoid = character and character:FindFirstChild("Humanoid")
            if myHumanoid then myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true) end
            for _, seat in ipairs(Workspace:GetDescendants()) do
                if seat:IsA("Seat") or seat:IsA("VehicleSeat") then seat.Disabled = false end
            end
            pcall(function()
                local re = ReplicatedStorage:FindFirstChild("RE")
                if re and re:FindFirstChild("1Clothe1s") then
                    re:FindFirstChild("1Clothe1s"):FireServer("CharacterSizeUp", 1)
                end
            end)
        end
    end)
end

local followConnection
if followConnection then followConnection:Disconnect() end
followConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            local targetPosition = selectedPlayer.Character.HumanoidRootPart.Position
            LocalPlayer.Character:SetPrimaryPartCFrame(
                CFrame.new(targetPosition) * CFrame.Angles(
                    math.rad(Workspace.DistributedGameTime * 12000),
                    math.rad(Workspace.DistributedGameTime * 15000),
                    math.rad(Workspace.DistributedGameTime * 18000)
                )
            )
        end)
    end
end)

local sitCheckConnection
if sitCheckConnection then sitCheckConnection:Disconnect() end
sitCheckConnection = RunService.Heartbeat:Connect(function()
    if (isFollowingKill or isFollowingPull) and selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("Humanoid") then
        pcall(function()
            if selectedPlayer.Character.Humanoid.Sit then
                if isFollowingKill then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(0, -500, 0))
                        task.wait(0.5)
                        local re = ReplicatedStorage:FindFirstChild("RE")
                        if re and re:FindFirstChild("1Too1l") then
                            re:FindFirstChild("1Too1l"):InvokeServer("PickingTools", "Couch")
                        end
                        task.wait(1)
                    end
                end
                isFollowingKill = false
                isFollowingPull = false
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and originalPosition then
                    local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if myHRP then
                        myHRP.Anchored = true
                        myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                        task.wait(0.2)
                        myHRP.Velocity = Vector3.zero
                        myHRP.RotVelocity = Vector3.zero
                        myHRP.Anchored = false
                        if myHumanoid then myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp) end
                    end
                    originalPosition = nil
                end
            end
        end)
    end
end)

Tab3:AddButton({
    Name = "Kill",
    Description = "Inicia o kill com o m√©todo selecionado",
    Callback = function()
        if isFollowingKill or isFollowingPull or running then return end
        if not selectedPlayer or not selectedKillPullMethod then return end
        if selectedKillPullMethod == "Sof√°" then
            killWithSofa(selectedPlayer)
        elseif selectedKillPullMethod == "√înibus" then
            killWithBus(selectedPlayer)
        end
    end
})

Tab3:AddButton({
    Name = "Bring",
    Description = "Inicia o Bring com o m√©todo selecionado",
    Callback = function()
        if isFollowingKill or isFollowingPull or running then return end
        if not selectedPlayer or not selectedKillPullMethod or selectedKillPullMethod ~= "Sof√°" then return end
        pullWithSofa(selectedPlayer)
    end
})

Tab3:AddButton({
    Name = "Parar Movimento",
    Description = "Para o movimento de matar ou puxar",
    Callback = function()
        isFollowingKill = false
        isFollowingPull = false
        if LocalPlayer.Character then
            for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                    part.Velocity = Vector3.zero
                    part.RotVelocity = Vector3.zero
                end
            end
            local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if myHumanoid then myHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true) end
        end
        for _, seat in ipairs(Workspace:GetDescendants()) do
            if seat:IsA("Seat") or seat:IsA("VehicleSeat") then seat.Disabled = false end
        end
        if originalPosition and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if myHRP then
                myHRP.Anchored = true
                myHRP.CFrame = CFrame.new(originalPosition + Vector3.new(0, 5, 0))
                task.wait(0.2)
                myHRP.Velocity = Vector3.zero
                myHRP.RotVelocity = Vector3.zero
                myHRP.Anchored = false
                local myHumanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                if myHumanoid then myHumanoid:ChangeState(Enum.HumanoidStateType.GettingUp) end
            end
            originalPosition = nil
        end

        disableCarClient()

        local args = { [1] = "DeleteAllVehicles" }
        pcall(function()
            local re = ReplicatedStorage:FindFirstChild("RE")
            if re and re:FindFirstChild("1Ca1r") then
                re:FindFirstChild("1Ca1r"):FireServer(unpack(args))
            end
        end)
    end
})


Tab4:AddButton({
    Name = "Ativar Skybox",
    Description = "Ativar o skybox personalizado",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local WearShirt = ReplicatedStorage.Remotes.WearShirt
        WearShirt:InvokeServer(98679358331654)

        local args = {{100839513065432}}
        game:GetService("ReplicatedStorage").Remotes.ChangeCharacterBody:InvokeServer(unpack(args))
        
        -- Anima√ß√£o
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        
        local function LoadTrack(id)
            local newAnim = Instance.new("Animation")
            newAnim.AnimationId = "rbxassetid://" .. tostring(id)
            local newTrack = humanoid:LoadAnimation(newAnim)
            newTrack.Priority = Enum.AnimationPriority.Action4
            newTrack:Play(0.1, 1, 1)
            return newTrack
        end

        local EmoteId = 101852027997337
        LoadTrack(EmoteId)
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Skybox",
            Text = "Skybox ativado com sucesso!",
            Duration = 5
        })
    end
})

Tab4:AddButton({
    Name = "Desativar Skybox",
    Description = "Remover skybox personalizado",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Remote = ReplicatedStorage.Remotes.ResetCharacterAppearance
        pcall(function()
            Remote:FireServer()
        end)

        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                    track:Stop()
                end
            end
        end
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Skybox",
            Text = "Skybox desativado!",
            Duration = 5
        })
    end
})
